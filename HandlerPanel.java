import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.event.*;
import java.awt.*;

public class HandlerPanel {
    private final ButtonGroup radioGroup;
    private JPanel mainPanel;
    private JPanel northPanel;
    private JPanel componentPanel;
    private JTextField outputTextField;
    private JRadioButton plainFontRadioButton;
    private JRadioButton boldFontRadioButton;
    private JRadioButton italicRadioButton;
    private JCheckBox boldCheckBox;
    private JCheckBox italicCheckBox;
    private JComboBox colourComboBox;
    private JList transformerList;
    private JScrollPane orinigalScrollPanel;
    private JButton copyButton;
    private JList copiedList;
    private JScrollPane copyScrollPanel;

    private static final String[] colours = {
            "Red",
            "Blue",
            "Green"
    };

    private static final String[] transformers = {
            "Optimus Prime",
            "Rodimus Prime",
            "Bumblebee",
            "Grimlock",
            "Sideswipe",
            "Megatron",
            "Galvatron",
            "Soundwave",
            "Starscream",
            "Shockwave"
    };

    public static void main(String[] args) {
        JFrame frame = new JFrame("HandlerPanel");
        frame.setContentPane(new HandlerPanel().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    public HandlerPanel() {
        radioGroup = new ButtonGroup();
        radioGroup.add(plainFontRadioButton);
        radioGroup.add(boldFontRadioButton);
        radioGroup.add(italicRadioButton);
        transformerList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        plainFontRadioButton.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                outputTextField.setText("Plain Font");
                outputTextField.setFont(new Font("Serif", Font.PLAIN, 12));
            }
        });
        boldFontRadioButton.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                outputTextField.setText("Bold Font");
                outputTextField.setFont(new Font("Serif", Font.BOLD, 12));
            }
        });
        italicRadioButton.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                outputTextField.setText("Italic Font");
                outputTextField.setFont(new Font("Serif", Font.ITALIC, 12));
            }
        });
        boldCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                outputTextField.setText("Bold CheckBox selected");
                outputTextField.setFont(new Font("Serif", Font.BOLD, 12));
            }
        });
        italicCheckBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                outputTextField.setText("Italic CheckBox selected");
                outputTextField.setFont(new Font("Serif", Font.ITALIC, 12));
            }
        });
        colourComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                outputTextField.setText(colours[colourComboBox.getSelectedIndex()]);
            }
        });
        transformerList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                outputTextField.setText(transformers[transformerList.getSelectedIndex()]);
            }
        });
        copyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                outputTextField.setText("\"Copy Transformers\" pressed");
                copiedList.setListData(transformerList.getSelectedValuesList().toArray(new String[0]));
            }
        });

        MouseHandler handler = new MouseHandler();
        mainPanel.addMouseListener(handler);
        mainPanel.addMouseMotionListener(handler);
    }

    ;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        northPanel = new JPanel();
        northPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(northPanel, BorderLayout.NORTH);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        northPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        outputTextField = new JTextField();
        panel1.add(outputTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        componentPanel = new JPanel();
        componentPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(componentPanel, BorderLayout.CENTER);
        plainFontRadioButton = new JRadioButton();
        plainFontRadioButton.setText("Plain Font");
        componentPanel.add(plainFontRadioButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        boldFontRadioButton = new JRadioButton();
        boldFontRadioButton.setText("Bold font");
        componentPanel.add(boldFontRadioButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        italicRadioButton = new JRadioButton();
        italicRadioButton.setText("Italic Font");
        componentPanel.add(italicRadioButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        boldCheckBox = new JCheckBox();
        boldCheckBox.setText("Bold Check Box");
        componentPanel.add(boldCheckBox, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        italicCheckBox = new JCheckBox();
        italicCheckBox.setText("Italic Check Box");
        componentPanel.add(italicCheckBox, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        colourComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Red");
        defaultComboBoxModel1.addElement("Blue");
        defaultComboBoxModel1.addElement("Green");
        colourComboBox.setModel(defaultComboBoxModel1);
        componentPanel.add(colourComboBox, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        orinigalScrollPanel = new JScrollPane();
        componentPanel.add(orinigalScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        transformerList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        defaultListModel1.addElement("Optimus Prime");
        defaultListModel1.addElement("Rodimus Prime");
        defaultListModel1.addElement("Bumblebee");
        defaultListModel1.addElement("Grimlock");
        defaultListModel1.addElement("Sideswipe");
        defaultListModel1.addElement("Megatron");
        defaultListModel1.addElement("Galvatron");
        defaultListModel1.addElement("Soundwave");
        defaultListModel1.addElement("Starscream");
        defaultListModel1.addElement("Shockwave");
        transformerList.setModel(defaultListModel1);
        orinigalScrollPanel.setViewportView(transformerList);
        copyButton = new JButton();
        copyButton.setText("Copy Transformers");
        componentPanel.add(copyButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        copyScrollPanel = new JScrollPane();
        componentPanel.add(copyScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        copiedList = new JList();
        copyScrollPanel.setViewportView(copiedList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private class MouseHandler extends MouseAdapter implements MouseListener, MouseMotionListener {
        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.isMetaDown()) {
                outputTextField.setText(String.format("Right Clicked at [%d %d]", e.getX(), e.getY()));
            } else if (e.isAltDown()) {
                outputTextField.setText(String.format("Middle Clicked at [%d %d]", e.getX(), e.getY()));
            } else {
                outputTextField.setText(String.format("Left Clicked at [%d %d]", e.getX(), e.getY()));
            }
        }

        @Override
        public void mousePressed(MouseEvent e) {
            //outputTextField.setText(String.format ("Pressed at [%d %d]", e.getX(), e.getY()));
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            //outputTextField.setText(String.format ("Released at [%d %d]", e.getX(), e.getY()));
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            outputTextField.setText(String.format("Entered at [%d %d]", e.getX(), e.getY()));
        }

        @Override
        public void mouseExited(MouseEvent e) {
            outputTextField.setText(String.format("Exited at [%d %d]", e.getX(), e.getY()));
        }

        @Override
        public void mouseDragged(MouseEvent e) {
            outputTextField.setText(String.format("Dragged at [%d %d]", e.getX(), e.getY()));
        }

        @Override
        public void mouseMoved(MouseEvent e) {
            outputTextField.setText(String.format("Moved at [%d %d]", e.getX(), e.getY()));
        }
    }
}
